<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神奇小站</title>
  
  <subtitle>这里总有神奇的东西</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://colalinn.github.io/"/>
  <updated>2020-02-11T14:37:47.042Z</updated>
  <id>https://colalinn.github.io/</id>
  
  <author>
    <name>ColaLinN</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开始你的语法秀，记他记他</title>
    <link href="https://colalinn.github.io/2020/02/06/2020-2-6-English-grammar-show/"/>
    <id>https://colalinn.github.io/2020/02/06/2020-2-6-English-grammar-show/</id>
    <published>2020-02-06T15:38:30.000Z</published>
    <updated>2020-02-11T14:37:47.042Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic4.zhimg.com/v2-bcc0b26d8818df00f6417fa84f44d28f_b.jpg" alt="img"></p><center>"语法秀"儿童班</center><a id="more"></a><p>一直以来，都没有系统的整理过英语语法，所以也学的不咋地，这次让我们做个了结吧！</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><a href="#英语的时态">英语的时态</a></p><p><a href="#英语的情态动词">英语的情态动词</a></p><p><a href="#被动语态">被动语态</a></p><p><a href="#非谓语动词">非谓语动词</a></p><p><a href="#原形不定式">原形不定式</a></p><p><a href="#假设">假设</a></p><p><a href="#定语从句">定语从句</a></p><p><a href="#宾语从句">宾语从句</a></p><p><a href="#比较级和最高级">比较级和最高级</a></p><h1 id="英语的时态"><a href="#英语的时态" class="headerlink" title="英语的时态"></a><a name="英语的时态">英语的时态</a></h1><h3 id="时态是什么？"><a href="#时态是什么？" class="headerlink" title="时态是什么？"></a>时态是什么？</h3><p>时态=时+态，分别如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">时-时间：过去、现在、将来、过去将来</span><br><span class="line">态-状态：一般、进行、完成、完成进行</span><br></pre></td></tr></table></figure><h3 id="时态有几种？"><a href="#时态有几种？" class="headerlink" title="时态有几种？"></a>时态有几种？</h3><p>16种，即上面的时和态排列组合，最终能获得4X4=16种</p><h3 id="时态都组合起来都叫什么？"><a href="#时态都组合起来都叫什么？" class="headerlink" title="时态都组合起来都叫什么？"></a>时态都组合起来都叫什么？</h3><ul><li><p>1-4 《过去时》</p></li><li><p><code>过去时</code>+<code>一般态</code>=<code>一般过去时</code></p></li><li><p><code>过去时</code>+<code>进行态</code>=<code>过去进行时</code></p></li><li><p><code>过去时</code>+<code>完成态</code>=<code>过去完成时</code></p></li><li><p><code>过去时</code>+<code>完成进行态</code>=<code>过去完成进行时</code></p></li><li><p>5-8《现在时》</p></li><li><p><code>现在时</code>+<code>一般态</code>=<code>一般现在时</code></p></li><li><p><code>现在时</code>+<code>进行态</code>=<code>现在进行时</code></p></li><li><p><code>现在时</code>+<code>完成态</code>=<code>现在完成时</code></p></li><li><p><code>现在时</code>+<code>完成进行态</code>=<code>现在完成进行时</code></p></li><li><p>8-12《将来时》</p></li><li><p><code>将来时</code>+<code>一般态</code>=<code>一般将来时</code></p></li><li><p><code>将来时</code>+<code>进行态</code>=<code>将来进行时</code></p></li><li><p><code>将来时</code>+<code>完成态</code>=<code>将来完成时</code></p></li><li><p><code>将来时</code>+<code>完成进行态</code>=<code>将来完成进行时</code></p></li><li><p>13-16《过去将来时》</p></li><li><p><code>过去将来时</code>+<code>一般态</code>=<code>一般过去将来时</code></p></li><li><p><code>过去将来时</code>+<code>进行态</code>=<code>过去将来进行时</code></p></li><li><p><code>过去将来时</code>+<code>完成态</code>=<code>过去将来完成时</code></p></li><li><p><code>过去将来时</code>+<code>完成进行态</code>=<code>过去将来完成进行时</code></p></li></ul><h3 id="例句"><a href="#例句" class="headerlink" title="例句"></a>例句</h3><p>作者：因为数学爱上<em>英语</em><br>链接：<a href="https://zhuanlan.zhihu.com/p/88680858" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/88680858</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>I often watch TV.<br>我经常看电视<br><strong>一般现在时</strong>：发生在现在，不强调动作<br>do+do=do（watch看，用动词原形）</p><p>I watched TV just now.</p><p>我刚刚在看电视<br><strong>一般过去时</strong>：发生在过去，不强调动作<br>do+did=did（watched看，过去式）</p><p>I am watching TV.<br>我正在看电视<br><strong>现在进行时</strong>：发生在现在，正在进行的动作<br>do+be doing=be doing（an watching正在看）</p><p>I was watching TV when you came in.<br><strong>过去进行时</strong>：发生在过去，正在进行的动作<br>did+be doing=was/were doing（was watching）</p><p>Yestday he told me he would go to the zoo next Sunday.<br>他昨天告诉我他下周天会去动物园.<br><strong>一般过去将来时</strong>：主体动作发生在过去，客体动作是将来可能要发生的动作<br>do+would=would do（主体动作told，did形式）</p><p>I have finished my homework.<br>我完成了我的作业.<br><strong>现在完成时</strong>：截止到现在已经完成了的动作对现在造成的影响.<br>do+have done= have done（have finished）</p><p>He had lived here for 20 years by the end of last year.<br>截止到去年末，他已经在这里居住了20年了<br><strong>过去完成时</strong>：过去的过去发生的动作对过去赵成的影响<br>did+have done=had done</p><p>The students have been being taught by me for 10 years.<br>我教这些学生已经十年了。<br><strong>现在完成进行时</strong>：（既强调动作又强调影响）截止到现在已经完成且未来还会进行的动作<br>do+have been doing=have been doing</p><p>I had been teaching here before you came to the city.<br>在你来这个城市之前我就在这教学了<br><strong>过去完成进行时</strong>：did+have been doing=had been doing</p><p>We will be having a meeting at this time next Sunday.<br>下周天的这个时候我们将正在开会<br><strong>将来进行时</strong>：发生在将来，正在进行的动作<br>will+be doing=will be doing</p><p>He said we would be having a meeting at this time next Sunday.</p><p>他说下星期天这个时候我们要开会。<br><strong>过去将来进行时</strong>：would+be doing=would be doing</p><p>I will have finished the book by the end of this year.<br>我将在今年年底前完成这本书。<br><strong>将来完成时</strong>：将来以前发生的动作对将来造成的影响<br>will+have done=will have done</p><p>He told us that he would have finished the book by the end of this year.<br>他告诉我们他将在今年年底完成这本书。<br><strong>过去将来完成时</strong>：would have done</p><p>By next summer，he will have been teaching here for 30 years.<br>到明年夏天，他将在这里教书30年。<br><strong>将来完成进行时</strong>：will+have been doing=will have been doing</p><p>He told us he would been teaching here for 30 years by next summer.<br>他告诉我们到明年夏天他将在这里教书30年。<br><strong>过去将来完成进行时</strong>：would+have been doing=would have been doing</p><hr><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p>英语时态<em>（三张A4纸解决</em>英语中的16种时态）</p><p><a href="https://zhuanlan.zhihu.com/p/88680858" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/88680858</a></p><h1 id="英语的情态动词"><a href="#英语的情态动词" class="headerlink" title="英语的情态动词"></a><a name="英语的情态动词">英语的情态动词</a></h1><h3 id="1-can、could；may、might"><a href="#1-can、could；may、might" class="headerlink" title="1.can、could；may、might"></a>1.can、could；may、might</h3><p><strong>can、could如下</strong>    can&gt;could，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">can&#x2F;could&#x2F;be able to   表示现在&#x2F;过去的能力(这里could是can的过去式)</span><br><span class="line">can&#x2F;could   表示客观可能性(can可能性大于could)</span><br><span class="line">can&#x2F;could   表示请求和允许(could比较委婉)</span><br><span class="line"></span><br><span class="line">1.He can &#x2F;could&#x2F;is able to swim.</span><br><span class="line">2.He can&#x2F;could come tomorrow.</span><br><span class="line">3.Can&#x2F;could I stay here?</span><br></pre></td></tr></table></figure><p><strong>may、might如下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">may&#x2F;might  表示可能性 (may&gt;might、might可能性很小)</span><br><span class="line">may&#x2F;might  表示请求和允许(might更委婉)</span><br><span class="line"></span><br><span class="line">1.He may&#x2F;might come here by bus</span><br><span class="line">2.-May&#x2F;might I join you?</span><br><span class="line">  -&gt;Yes，please.&#x2F;&#x2F;通用回答</span><br><span class="line">  -&gt;No,you can&#39;t.</span><br><span class="line">   &gt;No,you mustn&#39;t.</span><br></pre></td></tr></table></figure><p>论表达请求的委婉性：might&gt;may&gt;could&gt;can</p><h3 id="2-must、have-to"><a href="#2-must、have-to" class="headerlink" title="2.must、have to"></a>2.must、have to</h3><p>must、have to</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">must   表示主观多一些</span><br><span class="line">have to   表示客观多一些（有时态和数量的变化）</span><br><span class="line">我一定要打王者是主观，我要写作业是客观</span><br><span class="line">肯定：</span><br><span class="line">You must get up early. 你一定得早起（说话人的主观）</span><br><span class="line">It&#39;s going to rain,I have to go home now.表示说话人被迫</span><br><span class="line"></span><br><span class="line">否定形式：</span><br><span class="line">You mustn&#39;t go. 你不准去</span><br><span class="line">You don&#39;t have to go. 你不必去</span><br></pre></td></tr></table></figure><p>should、ought to</p><p>《should好像是shall的过去式》</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">should&#x2F;ought to 表示劝告、建议、命令（should主观、ought to客观）</span><br><span class="line">疑问句种用should代替ought to</span><br><span class="line"></span><br><span class="line">1.You should&#x2F;ought to do the job right now.（should是主观应该，ought to是客观应该）</span><br><span class="line">2.Should they stay here now?</span><br></pre></td></tr></table></figure><h3 id="3-need"><a href="#3-need" class="headerlink" title="3. need"></a>3. need</h3><p>need</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">做情态动词</span><br><span class="line">1.He need come here early.</span><br><span class="line">2.He needn&#39;t come here early.</span><br><span class="line">3.Need he come here early?</span><br><span class="line">-Yes,he need. No,he needn&#39;t</span><br><span class="line"></span><br><span class="line">做实义动词，又第三人称单数和时态的变化，后面可以带to的不定式</span><br><span class="line">1.He needs to come here early.</span><br><span class="line">2.He does&#39;t need to come here early.</span><br><span class="line">3.Does he need to come here early?</span><br><span class="line">-Yes,he does. No,he doesn&#39;t.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">回答must和have to的提问句</span><br><span class="line">must I come here early?</span><br><span class="line">Yes,you must.</span><br><span class="line">-No,you needn&#39;t.No,you don&#39;t have to.(意为不需要)</span><br></pre></td></tr></table></figure><h3 id="4-had-better、would-rather"><a href="#4-had-better、would-rather" class="headerlink" title="4.had better、would rather"></a>4.had better、would rather</h3><p>have better</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">最好做某事(had不表示时态变化，had better是一个短语)</span><br><span class="line">否定 had better not（最好不）</span><br><span class="line">例句</span><br><span class="line">1.He had better eat more.</span><br><span class="line">2.You&#39;d better finish it right now.</span><br></pre></td></tr></table></figure><p>would rather</p><p>《would 好像是will的过去式》</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">宁愿、宁可、最好、还是...为好(比had better要轻)</span><br><span class="line">否定 would rather not(还是不)</span><br><span class="line">You would rather deal with it now.</span><br></pre></td></tr></table></figure><h3 id="5-used-to、would"><a href="#5-used-to、would" class="headerlink" title="5.used to、would"></a>5.used to、would</h3><p>used to、would</p><p>表示过去习惯性动作，可翻译成过去常常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">used to 可指过去的状态或情况，动作的反复性，动作已经结束了不会再发生</span><br><span class="line">would 不可指过去的状态或情况，动作的反复性，动作还可以发发生</span><br><span class="line">1.The novel used to be popular.</span><br><span class="line">2.He used to live in Beijing.</span><br><span class="line">  He would practise English every week.</span><br><span class="line">3.People used to think that the earth was flat.</span><br><span class="line">  He would go to the park as soon as he was free.</span><br></pre></td></tr></table></figure><h3 id="6-情态动词-否定、疑问"><a href="#6-情态动词-否定、疑问" class="headerlink" title="6.情态动词 否定、疑问"></a>6.情态动词 否定、疑问</h3><p>否定 （一般是情态动词+not+v原形）</p><p>特殊如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">can&#39;t 不能</span><br><span class="line">may not 可能不</span><br><span class="line">mustn&#39;t 不准</span><br><span class="line">doesn&#39;t have to 不必</span><br><span class="line">（因为have后面加了to，所以have是实义动词，have有时态变化，需要助动词否定）</span><br></pre></td></tr></table></figure><p>疑问（一般是情态动词+主语+v原形）</p><p>特殊如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">回答must和have to的提问句</span><br><span class="line">must I come here early?</span><br><span class="line">Yes,you must.</span><br><span class="line">-No,you needn&#39;t.No,you don&#39;t have to.(意为不需要)</span><br></pre></td></tr></table></figure><h3 id="7-情态动词-完成时"><a href="#7-情态动词-完成时" class="headerlink" title="7.情态动词+完成时"></a>7.情态动词+完成时</h3><p>情态动词+have+p.p (过去分词) (对过去事实的描述)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.表达过去事实、推测的含义（组动词should除外）-》可能已经</span><br><span class="line">2.should+完成时-》本应该</span><br><span class="line">  needn&#39;t+完成时-》本不需要</span><br><span class="line">3.must+完成时-》准是已经</span><br><span class="line">  can&#39;t+完成时-》不可能已经（是 must+完成时 的否定）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.He can&#x2F;could have arrived.可能已经(推测性第二、三）###########这里could有被动式的意思嘛？</span><br><span class="line">  He may&#x2F;might have arrived.可能已经(推测性第四、五)</span><br><span class="line">  He must have arrived.     准是已经(推测性第一)</span><br><span class="line">2.He should have arrived.他本来应该到了，但是没到</span><br><span class="line">  You needn&#39;t have done so.你本不需要</span><br><span class="line">3.He must have arrived.他准是已经到了</span><br><span class="line">  He can&#39;t have arrived.</span><br></pre></td></tr></table></figure><h1 id="被动语态"><a href="#被动语态" class="headerlink" title="被动语态"></a><a name="被动语态">被动语态</a></h1><h3 id="1-被动语态的概念"><a href="#1-被动语态的概念" class="headerlink" title="1.被动语态的概念"></a>1.被动语态的概念</h3><p>英语的语态有两种，主动语态和被动语态。</p><p>主动语态表示主语是动作的执行者，被动语态表示主语是动作的承受者。</p><p>使用动词的被动语态作谓语。</p><h3 id="2-被动语态怎么构成"><a href="#2-被动语态怎么构成" class="headerlink" title="2.被动语态怎么构成"></a>2.被动语态怎么构成</h3><p>be+动词的过去分词(p.p.)+…+by sb.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">He is taken to America by his mother.</span><br></pre></td></tr></table></figure><h3 id="3-被动语态的各种时态"><a href="#3-被动语态的各种时态" class="headerlink" title="3.被动语态的各种时态"></a>3.被动语态的各种时态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一般现在时   The information is needed by us.</span><br><span class="line">过去进行时   The book was being read by him.</span><br><span class="line">现在完成时   The computer has been used by her.</span><br><span class="line">一般将来时   The room wiil be cleaned.</span><br><span class="line">过去完成时   The computer could have been used by them. ######疑惑</span><br></pre></td></tr></table></figure><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200210231022370.png" alt="image-20200210231022370"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200210233814393.png" alt="image-20200210233814393"></p><h3 id="4-情态动词-被动语态"><a href="#4-情态动词-被动语态" class="headerlink" title="4.情态动词+被动语态"></a>4.情态动词+被动语态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">can&#x2F;could+be+动词的过去分词(p.p.)</span><br><span class="line">右边同can  (may&#x2F;might、must&#x2F;have to、should &#x2F;ought to、had better&#x2F;would rather、used to &#x2F;would )</span><br></pre></td></tr></table></figure><p>need特殊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">need+doing+p.p  ;   need+to+be+p.p</span><br></pre></td></tr></table></figure><p>例句</p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211002828402.png" alt="image-20200211002828402"></p><h3 id="5-by-行为者省略的情况"><a href="#5-by-行为者省略的情况" class="headerlink" title="5.by+行为者省略的情况"></a>5.by+行为者省略的情况</h3><p>动作的行为者不分明，或不重要，或上下文中提到了行为者时，”by+行为者“可以省略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The information is needed.</span><br><span class="line">The book is being read.</span><br><span class="line">The door was opened.</span><br></pre></td></tr></table></figure><h3 id="6-被动语态疑问句"><a href="#6-被动语态疑问句" class="headerlink" title="6.被动语态疑问句"></a>6.被动语态疑问句</h3><p>一般疑问句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">助动词+主语+(其他助动词)+p.p...?</span><br><span class="line">1.Is the information needed by him?</span><br><span class="line">  - Yes,it is. No,it isn&#39;t.</span><br><span class="line">2.Has the compter been used by her?</span><br><span class="line">  - Yes,it has. No,it hasn&#39;t.</span><br><span class="line">3.Will the room be cleaned?</span><br><span class="line">  - Yes,it will. No it won&#39;t.</span><br></pre></td></tr></table></figure><p>特殊疑问句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">疑问词+助动词+主语+(其他助动词)+p.p...?</span><br><span class="line">即：疑问词+一般疑问句</span><br><span class="line">1.The information is needed by them.</span><br><span class="line">  -&gt;What is the information needed by them.</span><br><span class="line">2.The girl is taken to Shanghai.</span><br><span class="line">  -&gt;Where is the girl taken to?</span><br><span class="line">3.The book has been read by three times.</span><br><span class="line">  -&gt;How many times has the book been read?</span><br></pre></td></tr></table></figure><h1 id="非谓语动词"><a href="#非谓语动词" class="headerlink" title="非谓语动词"></a><a name="非谓语动词">非谓语动词</a></h1><h3 id="1-非谓语动词类型-动词不定式-动名词"><a href="#1-非谓语动词类型-动词不定式-动名词" class="headerlink" title="1.非谓语动词类型=动词不定式+动名词"></a>1.非谓语动词类型=动词不定式+动名词</h3><p><strong>to+动词原形-&gt;动词不定式</strong></p><p>可以做主语、宾语、宾补、定语、表语和状语 (除谓语之外所有成分)</p><p>可以把动词不定式看成一个名词，所以什么都能做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">主语：(To get there by bike ) will take us an hour.</span><br><span class="line">宾语：The driver failed (to see the car) in time.</span><br><span class="line">宾补：We believe him (to be guilty).</span><br><span class="line">定语：The next train (to arrive) is from seoul.</span><br><span class="line">表语：My suggestion is (to put off the meeting).（位于be系动词后做表语）</span><br><span class="line">状语：I come here only (to say goodbye to you).</span><br></pre></td></tr></table></figure><p><strong>动词原形+ing-&gt;动名词</strong></p><p>可做名词用,具有动词的特征、变化形式，但在句子中的用法及功能类似名词</p><p>在句子中可以作主语、宾语、表语、定语。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主语：(Reading) is an art.</span><br><span class="line">宾语：They went on (walking) and never stopped (talking).</span><br><span class="line">表语：Your task is quickly (cleaning the windows).</span><br><span class="line">定语：This is (reading) room.</span><br></pre></td></tr></table></figure><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211141908191.png" alt="image-20200211141908191"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211163012630.png" alt="image-20200211163012630"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211163145386.png" alt="image-20200211163145386"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211163208085.png" alt="image-20200211163208085"></p><p>不定式和动名词的具体区分未来会讲##############################</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1） 动名词与不定式的区别：</span><br><span class="line">动名词表达的是：状态,性质,心境,抽象,经常性,已发生的　不定式表达的是：目的,结果,原因,具体,一次性,将发生的</span><br><span class="line">2） 接不定式或动名词,意义相同.</span><br><span class="line">3)在下列情况下,一般要用不定式：</span><br><span class="line">①hate,like,love前有would(should)时,如：I&#39;d like to have a cup of coffee.</span><br><span class="line">②当谓语动词begin,continue,start等是进行式时,如：Thestudents are starting to work on the di fficult maths problem.</span><br><span class="line">③begin,continue,start与know,understand等状态动词连用时,如：I soon began to understand what was happening.</span><br><span class="line">⒋advise,allow,encourage,forbid,permit等动词后接动名词作宾语,或带不定式作宾语补足语.如：</span><br><span class="line">Our teachers don&#39;t permit our swimming in the lake.</span><br><span class="line">Our teachers don&#39;t permit us to swim in the lake.</span><br><span class="line">4） 部分动词后接不定式或动名词时,意义差别较大,应根据句子语境选择使用.</span><br><span class="line">①forget,remember,regret后接不定式,表示现在或未来的动作,接动名词表示动作已经发生.如：</span><br><span class="line">Don&#39;t forget fo post the letter for me.</span><br><span class="line">Have you forgotten meeting her in Beijing Airport?</span><br><span class="line">Remember to close the windows before you leave.</span><br><span class="line">I remember writing him a letter a year ago.</span><br><span class="line">We regret to tell you that all of you are not invited toattend the meeting.</span><br><span class="line">They regretted ordering these books from abroad.</span><br><span class="line">动名词与不定式语义不同的有11 组：</span><br><span class="line">1　stop to do　　　　　stop doing　　　</span><br><span class="line">2 forget to do　　　　 forget doing</span><br><span class="line">3　remember to do　　　remember doing　　　　　　</span><br><span class="line">4 regret to do　　　　 regret doing</span><br><span class="line">5　cease to do　　　　 cease doing　　　　　　　　</span><br><span class="line">6 try to do　　　　　　try doing</span><br><span class="line">7　go on to do　　　　 go on doing　　　　　　　　</span><br><span class="line">8 afraid to do　　　　 afraid doing</span><br><span class="line">9　interested to do　　interested doing　</span><br><span class="line">10 mean to do　　　　　 mean doing</span><br><span class="line">11 begin&#x2F; start to do　 begin&#x2F; start doing</span><br><span class="line">非谓语动词的用法是英语语法的一大难点,你最好全面对比一下不定式、动名词、现在分词、过去分词以及独立主格结构的用法!</span><br><span class="line">---------------------------------from 百度知道https:&#x2F;&#x2F;www.zybang.com&#x2F;question&#x2F;8d8679b341dfe4a16ae781fe4387f682.html</span><br></pre></td></tr></table></figure><h3 id="2-真假-形式-主语-宾语"><a href="#2-真假-形式-主语-宾语" class="headerlink" title="2.真假(形式)主语/宾语"></a>2.真假(形式)主语/宾语</h3><p>（1）不定式/动名词可以在主语的位置上，淡</p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211141428728.png" alt="image-20200211141428728"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211141726786.png" alt="image-20200211141726786"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211141825548.png" alt="image-20200211141825548"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211141838671.png" alt="image-20200211141838671"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211162932342.png" alt="image-20200211162932342"></p><h3 id="3-动词不定式引导目的状语从句"><a href="#3-动词不定式引导目的状语从句" class="headerlink" title="3.动词不定式引导目的状语从句"></a>3.动词不定式引导目的状语从句</h3><p>表示  “目的”   习惯上有以下两种形式（只有to+动词也行）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">in order to+动词  (引导的目的状语，置于句首、句尾均可)</span><br><span class="line">so as    to+动词  (引导的目的状语，只能置于句尾)</span><br><span class="line">例句</span><br><span class="line">1.I‘ve written it down （in order to） remember it.</span><br><span class="line">  -In order to remenber it ，I‘ve written it down.</span><br><span class="line">2.He shouted and waved (so as to) be noticed。</span><br></pre></td></tr></table></figure><p>否定形式，在to前加not</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in order not to+动词</span><br><span class="line">so as not to+动词</span><br></pre></td></tr></table></figure><h3 id="3-常见不定式和动名词的固定结构"><a href="#3-常见不定式和动名词的固定结构" class="headerlink" title="3.常见不定式和动名词的固定结构"></a>3.常见不定式和动名词的固定结构</h3><p>(1)too…to…：太…以至于不能…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The room is (too small to) live.</span><br></pre></td></tr></table></figure><p>(2)enough+n+to+v  / adj+enough+to+v：足够…可以…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">There is (enough food to eat).</span><br><span class="line">The box is (big enough to contain) six apples.</span><br></pre></td></tr></table></figure><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211154916313.png" alt="image-20200211154916313"></p><p>(3)On+动名词：一…就…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(On seeing) the snake,The girl was very frightened.（On doing引导做状语）</span><br></pre></td></tr></table></figure><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211155204487.png" alt="image-20200211155204487"></p><p>(4)There is no hope of + 动名词：没希望</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(There is no hope of seeing) him.</span><br></pre></td></tr></table></figure><p>(5)feel like+动名词：想要、喜欢做某事</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I (feel like eating) ice cream now.</span><br></pre></td></tr></table></figure><p>(6)have a hard time+ 动名词：做~艰难</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">They (have a hard time solving the problem themselves).</span><br></pre></td></tr></table></figure><h3 id="4-现在-过去-分词、分词句"><a href="#4-现在-过去-分词、分词句" class="headerlink" title="4.现在/过去 分词、分词句"></a>4.现在/过去 分词、分词句</h3><p>(1)v+ing 可称为动名词（gerund）、现在分词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">动名词：(Writing books) is his job.动名词做主语</span><br><span class="line">   He likes (drinking cooffe).动名词做宾语</span><br><span class="line">现在分词：He is Writing a book.</span><br></pre></td></tr></table></figure><p>(2)p.p（present participle动词）可称为动词过去分词，用于完成时和被动语态当中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">完成时：  He has written the homework.</span><br><span class="line">被动语态：The homework is written.</span><br></pre></td></tr></table></figure><p>(3)分词句：包含现在分词和过去分词的分句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">现在分词：The students went out of the classroom,laughing and talking.</span><br><span class="line">过去分词：Accompanied by his friend,he went to railway staion.</span><br><span class="line">这两句都是现在&#x2F;过去分词引导的伴随状语从句</span><br></pre></td></tr></table></figure><h1 id="原形不定式"><a href="#原形不定式" class="headerlink" title="原形不定式"></a><a name="原形不定式">原形不定式</a></h1><p>动词前不再加to</p><h3 id="1-使役动词"><a href="#1-使役动词" class="headerlink" title="1.使役动词"></a>1.使役动词</h3><p>（1）have/make/let +宾语+v （使役动词，表示“使/让”）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">He made me laugh.</span><br><span class="line">I let him go.</span><br><span class="line">Please have him come here.</span><br></pre></td></tr></table></figure><p>(2)get、help都做使役动词，</p><p>get的使役动词句为：get+宾语+to+v    (使/让的意思)</p><p>help的使役动词为：help+宾语+（to）+v   (帮助)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I can&#39;t get anyone to do the work properly.</span><br><span class="line">I helped him (to) repair the car.</span><br></pre></td></tr></table></figure><p>(3)以上所有   使役动词+宾语+过去分词（表示“让某物/人被别人…”）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.I must (get my hair cut).</span><br><span class="line">2.He couldn&#39;t (make himself heard).</span><br><span class="line">3.Can you (get the work finished) in time?</span><br></pre></td></tr></table></figure><h3 id="2-感官动词"><a href="#2-感官动词" class="headerlink" title="2.感官动词"></a>2.感官动词</h3><p>感官动词：see/watch/observe/hear/smell/taste/feel</p><p>眼看 see/watch/observe   耳听hear   鼻闻smell  品尝taste   手触feel  《五官》</p><p>(1)  感官动词+宾语+动词原形/现在分词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1...+动词原形，表示动作的真实性</span><br><span class="line">2...+现在分词，表示动作的真实性、连续性和进行性</span><br><span class="line">例句</span><br><span class="line">1.I (saw him work) in the garden yesterday.</span><br><span class="line">2.I (saw him working) in the garden yesterday.</span><br><span class="line">  I (watched a dog running) in the garden yesterday.</span><br></pre></td></tr></table></figure><p>（2）感官动词+宾语+过去分词   （表被动）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">John saw the man knocked down by the car.（他被车撞）</span><br></pre></td></tr></table></figure><h1 id="假设"><a href="#假设" class="headerlink" title="假设"></a><a name="假设">假设</a></h1><h3 id="1-if只表示单纯条件的假设（与现在事实相反？）"><a href="#1-if只表示单纯条件的假设（与现在事实相反？）" class="headerlink" title="1.if只表示单纯条件的假设（与现在事实相反？）"></a>1.if只表示单纯条件的假设（与现在事实相反？）</h3><p>“if”引导的条件状语从句。规则如下</p><p>1.主句为一般将来时，从句一般现在时，译作“如果…就”<br>2.从句可放可放句尾(句前强调条件,句尾强调结果 from baidu)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.If you get up early,you will catch up with the train.</span><br><span class="line">2.She will be upset if you fail the axam.</span><br></pre></td></tr></table></figure><h3 id="2-if与现在事实相反的虚拟语气"><a href="#2-if与现在事实相反的虚拟语气" class="headerlink" title="2.if与现在事实相反的虚拟语气"></a>2.if与现在事实相反的虚拟语气</h3><p>“if”引导的从句式一种虚拟的条件或假设，和现在事实相反。</p><p>从句：用过去式，（be必须用were）</p><p>主句：would/could/should/might+动词原形</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.If I were you,I would join them.</span><br><span class="line">2.She would come with you if you invited her.</span><br></pre></td></tr></table></figure><h3 id="3-if与过去事实相反的虚拟语气"><a href="#3-if与过去事实相反的虚拟语气" class="headerlink" title="3.if与过去事实相反的虚拟语气"></a>3.if与过去事实相反的虚拟语气</h3><p>“if”引导的从句式一种虚拟的条件或假设，和过去事实相反。</p><p>从句：had+动词过去分词（过去完成时）</p><p>主句：would/could/should/might+have+动词过去分词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.If I (had got) there earlier,I (should have met) her.</span><br><span class="line">2.If he (had taken) my advice,he (would not have made) such a mistake.</span><br></pre></td></tr></table></figure><p>if 与将来事实相反呢####################################</p><h3 id="4-wish、as-if的假设"><a href="#4-wish、as-if的假设" class="headerlink" title="4.wish、as if的假设"></a>4.wish、as if的假设</h3><p>(1)wish 表示愿望、希望、“希望…就好了“，是不可能实现的假设。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.从句表示现在事实相反的愿望(一般过去时)</span><br><span class="line">2.从句表示过去事实相反的愿望(过去完成时)</span><br><span class="line">3.从句表示将来不大可能实现的愿望(would&#x2F;should&#x2F;could+v原)</span><br><span class="line">主句按时态正常表示</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.I wish I (were) as tall as you.</span><br><span class="line">2.He wished he (hadn&#39;t said) that.（wished表示过去时愿望）</span><br><span class="line">3.I wish it (would rain) tomorrow.</span><br></pre></td></tr></table></figure><p>(2)as if表示“看起来好像…“，是不可能实现的假设。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.从句表示现在事实相反的愿望(一般过去时)</span><br><span class="line">2.从句表示过去事实相反的愿望(过去完成时)</span><br><span class="line">3.从句表示将来不大可能实现的愿望(would&#x2F;should&#x2F;could+v原)</span><br><span class="line">主句按时态正常表示</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.You looks as if you (didn&#39;t) care.</span><br><span class="line">2.He talks about Rome as if he (had been) there before.</span><br><span class="line">3.He opened his mouth as if he (would say) something.</span><br></pre></td></tr></table></figure><h1 id="定语从句"><a href="#定语从句" class="headerlink" title="定语从句"></a><a name="定语从句">定语从句</a></h1><h3 id="1-定语从句是啥？"><a href="#1-定语从句是啥？" class="headerlink" title="1.定语从句是啥？"></a>1.定语从句是啥？</h3><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211203542506.png" alt="image-20200211203542506"></p><h3 id="2-定语从句关系代词"><a href="#2-定语从句关系代词" class="headerlink" title="2.定语从句关系代词?"></a>2.定语从句关系代词?</h3><p>the girl 为先行词，whom/that 为关系代词</p><p>先行词和关系代词是一致的</p><p>主格主语、宾格宾语、属格属语属于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The girl (whom&#x2F;that I spoke to) is my cousin.</span><br><span class="line">whom&#x2F;that I spoke to为定语从句，i spoke to XX,这里XX作宾语，故使用whom&#x2F;that作为关系词</span><br></pre></td></tr></table></figure><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211203748837.png" alt="image-20200211203748837"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211205122045.png" alt="image-20200211205122045"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211205701086.png" alt="image-20200211205701086"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211205531186.png" alt="image-20200211205531186"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211210009310.png" alt="image-20200211210009310"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211210937482.png" alt="image-20200211210937482"></p><h3 id="（非）限制性定语从句-of-which"><a href="#（非）限制性定语从句-of-which" class="headerlink" title="（非）限制性定语从句 of which???"></a>（非）限制性定语从句 of which???</h3><h3 id="定语从句的时态"><a href="#定语从句的时态" class="headerlink" title="定语从句的时态"></a>定语从句的时态</h3><h3 id="3-定语从句-关系副词"><a href="#3-定语从句-关系副词" class="headerlink" title="3.定语从句-关系副词"></a>3.定语从句-关系副词</h3><p>天气会更好的下一周</p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211211631348.png" alt="image-20200211211631348"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211211851931.png" alt="image-20200211211851931"></p><h1 id="宾语从句"><a href="#宾语从句" class="headerlink" title="宾语从句"></a><a name="宾语从句">宾语从句</a></h1><h3 id="1-宾语从句是啥？"><a href="#1-宾语从句是啥？" class="headerlink" title="1.宾语从句是啥？"></a>1.宾语从句是啥？</h3><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211214212896.png" alt="image-20200211214212896"></p><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>that可省</p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211214621884.png" alt="image-20200211214621884"></p><h1 id="比较级和最高级"><a href="#比较级和最高级" class="headerlink" title="比较级和最高级"></a><a name="比较级和最高级">比较级和最高级</a></h1><h3 id="1-比较级、最高级变化"><a href="#1-比较级、最高级变化" class="headerlink" title="1.比较级、最高级变化"></a>1.比较级、最高级变化</h3><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211215648983.png" alt="image-20200211215648983"></p><p>4.重度闭音节、开音节</p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211220012963.png" alt="image-20200211220012963"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211215835499.png" alt="image-20200211215835499"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211215752248.png" alt="image-20200211215752248"></p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211220958880.png" alt="image-20200211220958880"></p><h3 id="2-比较级、最高级使用"><a href="#2-比较级、最高级使用" class="headerlink" title="2.比较级、最高级使用"></a>2.比较级、最高级使用</h3><p>（1）比较级</p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211221740018.png" alt="image-20200211221740018"></p><p>（2）最高级</p><p>在后面用一个介词短语来表示范围</p><p>among the three 三个人当中的</p><p><img src="/2020/02/06/2020-2-6-English-grammar-show/image-20200211221922216.png" alt="image-20200211221922216"></p><p>2020.2.11，奥里给，谢谢老师！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-bcc0b26d8818df00f6417fa84f44d28f_b.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;center&gt;&quot;语法秀&quot;儿童班&lt;/center&gt;
    
    </summary>
    
    
      <category term="English_grammar" scheme="https://colalinn.github.io/categories/English-grammar/"/>
    
    
      <category term="English" scheme="https://colalinn.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>2020-2-4-pRide-current-search</title>
    <link href="https://colalinn.github.io/2020/02/04/2020-2-4-pRide-current-search/"/>
    <id>https://colalinn.github.io/2020/02/04/2020-2-4-pRide-current-search/</id>
    <published>2020-02-04T15:00:13.000Z</published>
    <updated>2020-02-04T16:04:22.263Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/02/04/2020-2-4-pRide-current-search/image-20200204233855033.png" alt="image-20200204233855033"></p><center>这是一篇关于pRIDE所用技术的检索结果</center><a id="more"></a><h1 id="1-路网嵌入（ROAD-NETWORK-ENBEDDING）"><a href="#1-路网嵌入（ROAD-NETWORK-ENBEDDING）" class="headerlink" title="1.路网嵌入（ROAD NETWORK ENBEDDING）"></a>1.路网嵌入（ROAD NETWORK ENBEDDING）</h1><p>目前的思路是自己从百度地图(google地图)查，然后存下来</p><p>至于用什么形式存，555我也不清楚</p><h1 id="2-同态加密"><a href="#2-同态加密" class="headerlink" title="2.同态加密"></a>2.同态加密</h1><p>pRIDE论文有提到两个链接，我觉得挺好的，应该可以直接用</p><ul><li><p>github-上的代码-jPaillier    <a href="https://github.com/kunerd/jpaillier" target="_blank" rel="noopener">https://github.com/kunerd/jpaillier</a></p><p><img src="/2020/02/04/2020-2-4-pRide-current-search/image-20200204233652918.png" alt="image-20200204233652918"></p></li><li><p>论文还提到一个JDBC（不知道是用来干啥的）</p><p><img src="/2020/02/04/2020-2-4-pRide-current-search/image-20200204233714656.png" alt="image-20200204233714656"></p></li></ul><h1 id="3-混淆电路Garbled-Circuit"><a href="#3-混淆电路Garbled-Circuit" class="headerlink" title="3.混淆电路Garbled Circuit"></a>3.混淆电路Garbled Circuit</h1><ul><li><p>混淆电路介绍，知乎上的，讲的海星</p><p><a href="https://zhuanlan.zhihu.com/p/41172002" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/41172002</a></p></li><li><p>pRIDE论文里提到了他们用的是一篇论文提出的加速版安全双方计算混淆电路</p><p><strong>Faster Secure Two-Party Computation Using Garbled Circuits</strong></p><p><img src="/2020/02/04/2020-2-4-pRide-current-search/image-20200204233855033.png" alt="image-20200204233855033"></p></li><li><p>github的搜索结果  <a href="https://github.com/search?q=Garbled-Circuits" target="_blank" rel="noopener">https://github.com/search?q=Garbled-Circuits</a></p><p><img src="/2020/02/04/2020-2-4-pRide-current-search/image-20200204233627276.png" alt="image-20200204233627276"></p></li><li><p>github-某个java仓库，我觉得挺好的</p><p> <a href="https://github.com/thanosba/Yao-Garbled-Circuits![image-20200204233556551](2020-2-4-pRide-current-search/image-20200204233556551.png)" target="_blank" rel="noopener">https://github.com/thanosba/Yao-Garbled-Circuits![image-20200204233556551](2020-2-4-pRide-current-search/image-20200204233556551.png)</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/02/04/2020-2-4-pRide-current-search/image-20200204233855033.png&quot; alt=&quot;image-20200204233855033&quot;&gt;&lt;/p&gt;
&lt;center&gt;这是一篇关于pRIDE所用技术的检索结果&lt;/center&gt;
    
    </summary>
    
    
      <category term="pRIDE" scheme="https://colalinn.github.io/categories/pRIDE/"/>
    
    
      <category term="pRIDE" scheme="https://colalinn.github.io/tags/pRIDE/"/>
    
  </entry>
  
  <entry>
    <title>2020-2-4</title>
    <link href="https://colalinn.github.io/2020/02/04/2020-2-4-tensorflow-gpu-CUDA/"/>
    <id>https://colalinn.github.io/2020/02/04/2020-2-4-tensorflow-gpu-CUDA/</id>
    <published>2020-02-04T09:48:21.000Z</published>
    <updated>2020-02-04T14:58:18.550Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>1-10 leetcode题解</title>
    <link href="https://colalinn.github.io/2020/01/26/2020-1-26-leetcode/"/>
    <id>https://colalinn.github.io/2020/01/26/2020-1-26-leetcode/</id>
    <published>2020-01-26T12:10:26.000Z</published>
    <updated>2020-02-05T15:59:07.525Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/01/26/2020-1-26-leetcode/1-10.jpg" alt="1-10截图"></p><a id="more"></a><h1 id="1-两数之合"><a href="#1-两数之合" class="headerlink" title="1.两数之合"></a>1.两数之合</h1><ul><li><p>题目</p><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p></li><li><p>解题思路</p><p>主要的做题思路是遍历每个对象，如果target减去当前的值A得到的B在map中，那就找到了！</p><p>就把这两个位置(一个map中，一个当前位置)返回去。</p><p>如果没有找到，就把遍历到的（位置，值）放到map中</p><p>//以下为一个战胜100%的java代码，99%之类的用的是Map，看来以下这样写的效率应该高一点点</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">       <span class="keyword">int</span> maxValue = <span class="number">2048</span>;<span class="comment">//样例中nums数组的大小应该不比2048大</span></span><br><span class="line">       <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[maxValue];<span class="comment">//和Hashmap一样的作用，存入的值是（位置，值）</span></span><br><span class="line">       <span class="keyword">int</span> tool = maxValue - <span class="number">1</span>;<span class="comment">//2的11次方减1，大概是用于做hash的作用</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;<span class="comment">//遍历每个对象</span></span><br><span class="line">            <span class="keyword">int</span> num = nums[i];</span><br><span class="line">            <span class="keyword">int</span> pos = map[(target - num) &amp; tool];</span><br><span class="line">            <span class="keyword">if</span> (pos != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//如果target减去当前的值A得到的B在map中，那就找到了</span></span><br><span class="line">                <span class="comment">//就把这两个位置(一个map中，一个当前位置)返回去                </span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;pos - <span class="number">1</span>, i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map[num &amp; tool] = i + <span class="number">1</span>;<span class="comment">//如果没有找到，就把遍历到的（位置，值）放到map中</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h1><p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-palindromic-substring/</a></p><ul><li><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">输入：(<span class="number">2</span> -&gt; <span class="number">4</span> -&gt; <span class="number">3</span>) + (<span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">4</span>)</span><br><span class="line">输出：<span class="number">7</span> -&gt; <span class="number">0</span> -&gt; <span class="number">8</span></span><br><span class="line">原因：<span class="number">342</span> + <span class="number">465</span> = <span class="number">807</span></span><br></pre></td></tr></table></figure></li><li><p>题解很简单，就是遍历两个链表，设置一个carry作为进位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;//这是定义了链表的节点</span></span><br><span class="line"><span class="comment"> *     int val;//节点有值</span></span><br><span class="line"><span class="comment"> *     ListNode next;//节点指向的下个节点</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;//节点的构造器，初始化val为传入x</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode result=<span class="keyword">new</span> ListNode(<span class="number">0</span>);<span class="comment">//做一个0值头指针</span></span><br><span class="line">        ListNode resultA=result;</span><br><span class="line">        <span class="keyword">int</span> carry=<span class="number">0</span>;<span class="comment">//进位值</span></span><br><span class="line">        <span class="keyword">int</span> i1,i2;<span class="comment">//遍历链表的值</span></span><br><span class="line">        <span class="keyword">int</span> sum;<span class="comment">//总数</span></span><br><span class="line">        <span class="comment">//carry!=0（carry=）是为了链表节点数一样，但是有进位的情况</span></span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span>|l2!=<span class="keyword">null</span>|carry!=<span class="number">0</span>)<span class="comment">//链表还有下一个节点、或者还有下个进位就继续</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里是为了判断链表数不一样的情况</span></span><br><span class="line">            i1=l1!=<span class="keyword">null</span>?l1.val:<span class="number">0</span>;</span><br><span class="line">            i2=l2!=<span class="keyword">null</span>?l2.val:<span class="number">0</span>;</span><br><span class="line">            System.out.print(i1);        </span><br><span class="line">            sum=i1+i2+carry;</span><br><span class="line">            carry=sum/<span class="number">10</span>;<span class="comment">//把sum的进位留到下一个节点</span></span><br><span class="line">            ListNode newNode=<span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);<span class="comment">//余数就放在当前新建节点       </span></span><br><span class="line">            result.next=newNode;</span><br><span class="line">            result=newNode;</span><br><span class="line">            l1=l1!=<span class="keyword">null</span>?l1.next:<span class="keyword">null</span>;<span class="comment">//遍历链表1</span></span><br><span class="line">            l2=l2!=<span class="keyword">null</span>?l2.next:<span class="keyword">null</span>;<span class="comment">//遍历链表2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultA.next;<span class="comment">//返回0值头指针所指向的链表</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a>5. 最长回文子串</h1><p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-palindromic-substring/</a></p><ul><li><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot; 也是一个有效答案。</span><br></pre></td></tr></table></figure></li><li><p>主要的思路，就是遍历字符串的每个字符。</p><p>每个字符串从中间往外面寻找是否是回文，是的话继续寻找，直到两边字符不再相同，就停止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length_s=s.length(),length_Palin=<span class="number">1</span>;</span><br><span class="line">        String result=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> first,second,first_next,second_next;</span><br><span class="line">        <span class="keyword">if</span>(length_s==<span class="number">1</span>) <span class="keyword">return</span> s;<span class="comment">//判断是否为一个字符，直接返回</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(length_s&gt;<span class="number">1</span>) result=s.substring(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//把第一个字符放进来，使得最少为一个字符</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用两个指针遍历</span></span><br><span class="line">        <span class="keyword">for</span>(first=<span class="number">0</span>,second=<span class="number">1</span>;second&lt;length_s;first++,second++)&#123;</span><br><span class="line">            <span class="comment">//这是两个指针判断的回文</span></span><br><span class="line">            <span class="keyword">if</span>(s.charAt(first)==s.charAt(second))&#123;</span><br><span class="line">                first_next=first;second_next=second;</span><br><span class="line">                    <span class="keyword">while</span>(first_next-<span class="number">1</span>&gt;=<span class="number">0</span> &amp;&amp; second_next+<span class="number">1</span>&lt;length_s &amp;&amp; s.charAt(first_next-<span class="number">1</span>)==s.charAt(second_next+<span class="number">1</span>))&#123;</span><br><span class="line">                    first_next--;</span><br><span class="line">                    second_next++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(result.length()&lt;second_next-first_next+<span class="number">1</span>)&#123;</span><br><span class="line">                    result=s.substring(first_next, second_next+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">//这是一个指针判断的两侧回文</span></span><br><span class="line">            <span class="keyword">if</span>(second&lt;=length_s-<span class="number">2</span>&amp;&amp;s.charAt(second-<span class="number">1</span>)==s.charAt(second+<span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                first_next=second-<span class="number">1</span>;second_next=second+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(first_next-<span class="number">1</span>&gt;=<span class="number">0</span> &amp;&amp; second_next+<span class="number">1</span>&lt;length_s &amp;&amp; s.charAt(first_next-<span class="number">1</span>)==s.charAt(second_next+<span class="number">1</span>))&#123;</span><br><span class="line">                    first_next--;</span><br><span class="line">                    second_next++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(result.length()&lt;second_next-first_next+<span class="number">1</span>)&#123;</span><br><span class="line">                    result=s.substring(first_next, second_next+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9.回文数"></a>9.回文数</h1><p><a href="https://leetcode-cn.com/problems/palindrome-number/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/palindrome-number/</a></p><ul><li><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 121</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure></li><li><p>主要是借鉴了评论区高赞老哥的思路，因为x是int型,若逆序后(即12345-&gt;54321)溢出则不是回文序列。</p><p>分三种情况</p><p>1)x为负数,false<br>2)x逆序后,与原来x不同,溢出或非回文,false<br>3)x逆序后与原来x相同,回文,true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> x_origin=x;</span><br><span class="line">        <span class="keyword">long</span> reserve=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">            reserve=reserve*<span class="number">10</span>+x%<span class="number">10</span>;</span><br><span class="line">            x=x/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((<span class="keyword">int</span>)reserve!=x_origin) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/01/26/2020-1-26-leetcode/1-10.jpg&quot; alt=&quot;1-10截图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://colalinn.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://colalinn.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>搭建机场简易教程shadowsocks centos7 vutlr bbr</title>
    <link href="https://colalinn.github.io/2020/01/26/shadowsocks-centos7-vutlr-bbr/"/>
    <id>https://colalinn.github.io/2020/01/26/shadowsocks-centos7-vutlr-bbr/</id>
    <published>2020-01-26T11:40:57.000Z</published>
    <updated>2020-02-03T09:46:28.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-获得vutlr服务器后-包含ip、用户名和密码-使用Xshell连接（其他连接器请自行百度）"><a href="#1-获得vutlr服务器后-包含ip、用户名和密码-使用Xshell连接（其他连接器请自行百度）" class="headerlink" title="1.获得vutlr服务器后(包含ip、用户名和密码)使用Xshell连接（其他连接器请自行百度）"></a>1.获得vutlr服务器后(包含ip、用户名和密码)使用Xshell连接（其他连接器请自行百度）</h2><h2 id="2-依次输入以下代码安装shadowsocks"><a href="#2-依次输入以下代码安装shadowsocks" class="headerlink" title="2.依次输入以下代码安装shadowsocks"></a>2.依次输入以下代码安装shadowsocks</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget</span><br></pre></td></tr></table></figure><h4 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget –no-check-certificate -O shadowsocks.sh https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;teddysun&#x2F;shadowsocks_install&#x2F;master&#x2F;shadowsocks.sh</span><br></pre></td></tr></table></figure><h4 id="获取shadowsocks-sh读取权限"><a href="#获取shadowsocks-sh读取权限" class="headerlink" title="获取shadowsocks.sh读取权限"></a>获取shadowsocks.sh读取权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x shadowsocks.sh</span><br></pre></td></tr></table></figure><h4 id="设置个人shadowsocks密码和端口号"><a href="#设置个人shadowsocks密码和端口号" class="headerlink" title="设置个人shadowsocks密码和端口号"></a>设置个人shadowsocks密码和端口号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><p>然后依次输入你的密码password、端口号(就是ss服务的端口号，后面连接使用)、加密模式(很多人推荐7 aes-256-cfb)</p><p>按任意键开始配置press any key to start，如果是第一次配置需要几分钟</p><h4 id="配置完之后可以看到用四行红字"><a href="#配置完之后可以看到用四行红字" class="headerlink" title="配置完之后可以看到用四行红字"></a>配置完之后可以看到用四行红字</h4><p>这个就是我们shadowsocks的连接信息了,其中除了ip是服务器自带的，端口、密码、加密模式都是我们自选的</p><h2 id="3-安装拥塞控制BBR加速上网"><a href="#3-安装拥塞控制BBR加速上网" class="headerlink" title="3.安装拥塞控制BBR加速上网"></a>3.安装拥塞控制BBR加速上网</h2><h4 id="安装BBR"><a href="#安装BBR" class="headerlink" title="安装BBR"></a>安装BBR</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https:&#x2F;&#x2F;github.com&#x2F;teddysun&#x2F;across&#x2F;raw&#x2F;master&#x2F;bbr.sh</span><br></pre></td></tr></table></figure><h4 id="获得读取权限"><a href="#获得读取权限" class="headerlink" title="获得读取权限"></a>获得读取权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x bbr.sh</span><br></pre></td></tr></table></figure><h4 id="启动BBR安装"><a href="#启动BBR安装" class="headerlink" title="启动BBR安装"></a>启动BBR安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;bbr.sh</span><br></pre></td></tr></table></figure><p>这步安装也蛮久的</p><p>按任意键安装，完成之后提示是否重启，输入y确定重启</p><p>重启之后</p><p>输入以下的指令查看BBR是否启动，若提示tcp_bbr则成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><h2 id="4-在客户端重启ss，享受你的丝滑ss吧"><a href="#4-在客户端重启ss，享受你的丝滑ss吧" class="headerlink" title="4.在客户端重启ss，享受你的丝滑ss吧"></a>4.在客户端重启ss，享受你的丝滑ss吧</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service shadowsocks restart</span><br></pre></td></tr></table></figure><hr><p>参考链接</p><p>1.使用vultr(vps)搭建ss并开启BBR快速上网教程 超简单10分钟搞定</p><p><a href="https://wistbean.github.io/vultr-vps-bbr-ss.html" target="_blank" rel="noopener">https://wistbean.github.io/vultr-vps-bbr-ss.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-获得vutlr服务器后-包含ip、用户名和密码-使用Xshell连接（其他连接器请自行百度）&quot;&gt;&lt;a href=&quot;#1-获得vutlr服务器后-包含ip、用户名和密码-使用Xshell连接（其他连接器请自行百度）&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="shadowsocks" scheme="https://colalinn.github.io/categories/shadowsocks/"/>
    
    
      <category term="shadowsocks" scheme="https://colalinn.github.io/tags/shadowsocks/"/>
    
      <category term="vpn" scheme="https://colalinn.github.io/tags/vpn/"/>
    
      <category term="centos" scheme="https://colalinn.github.io/tags/centos/"/>
    
      <category term="vutlr" scheme="https://colalinn.github.io/tags/vutlr/"/>
    
  </entry>
  
  <entry>
    <title>pRide具体方案</title>
    <link href="https://colalinn.github.io/2020/01/23/2020-1-23-pRide-optimized-construction/"/>
    <id>https://colalinn.github.io/2020/01/23/2020-1-23-pRide-optimized-construction/</id>
    <published>2020-01-23T08:05:04.000Z</published>
    <updated>2020-01-31T09:22:40.270Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/01/23/2020-1-23-pRide-optimized-construction/image-20200123162426100.png" alt="图1"></p><center>这是一篇pRide具体方案的翻译简化版</center><a id="more"></a><h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><p>初始方案暂且不谈，先说优化方案。</p><p>一：地图分块，减少计算量</p><p>二：把路网嵌入向量打包起来，使得加密等操作可以一步完成</p><h3 id="步骤：Setup、Location-update、Ride-request、Ride-matching"><a href="#步骤：Setup、Location-update、Ride-request、Ride-matching" class="headerlink" title="步骤：Setup、Location-update、Ride-request、Ride-matching"></a>步骤：Setup、Location-update、Ride-request、Ride-matching</h3><p>为了保证分块后的精度，我们首先寻找与乘客所处区域α的最近司机，再以乘客到该司机的距离为半径来判断区域α周围的区域是否划入范围（就是看以该距离为半径的圆是否“触”到了周围区域）</p><h3 id="使用技术："><a href="#使用技术：" class="headerlink" title="使用技术："></a>使用技术：</h3><p>路网嵌入（ROAD NETWORK ENBEDDING），用于提高最短距离计算效率</p><p>同态加密 （Homomorphic），用于提供密文状态下的加法（及乘法）同步到明文中</p><p>混淆电路（Garbled Circuit），用于提供CP（Crypto Provider）和ORH服务器的安全两方计算、有点像零知识证明</p><h3 id="一、初始化-Setup"><a href="#一、初始化-Setup" class="headerlink" title="一、初始化   Setup"></a>一、初始化   Setup</h3><p>1.ORH   地图分块(如图1所示)</p><p><img src="/2020/01/23/2020-1-23-pRide-optimized-construction/image-20200123162426100.png" alt="图1"></p><p>​                                                                                  图  1</p><p>2.ORH   计算  地图道路的   路网嵌入向量</p><p>3.CP   初始化同态加密公钥并分发</p><h3 id="二、司机-位置更新-Location-update"><a href="#二、司机-位置更新-Location-update" class="headerlink" title="二、司机 位置更新   Location-update"></a>二、司机 位置更新   Location-update</h3><p>此步骤主要用于司机上传自己的位置信息（在pRide里是上传自己的路网嵌入信息）</p><p>1.司机端   计算自己的路网嵌入变量S</p><p>根据从服务器获取的地图道路路网嵌入向量、来在本地计算自己的路网嵌入向量S（这在路网嵌入已经讲过了）</p><p>2.司机端   把S打包成一个变量P</p><p>就是像进制位一样叠加维度S(如图2)</p><p><img src="/2020/01/23/2020-1-23-pRide-optimized-construction/image-20200123162003661.png" alt="图2"></p><p>​                                                                                  图  2</p><p>3.司机端   把P用从CP获得的公钥加密成[P(b)]，把这个[P(b)]和所处区域Zα上传到ORH</p><p>4.ORH   随机生成一个路网嵌入向量u，并加密之成[P(u)]</p><p>5.ORH   使用[P(b)]-[P(u)]=&gt;[P(b‘)]</p><h3 id="三、乘客-乘车请求-Ride-request"><a href="#三、乘客-乘车请求-Ride-request" class="headerlink" title="三、乘客 乘车请求   Ride-request"></a>三、乘客 乘车请求   Ride-request</h3><p>1.乘客端   把自己的坐标x、y加密为[x]、[y]</p><p>2.乘客端   计算自己的路网嵌入向量S、打包、加密之得到[P(a)]</p><p>3.乘客端 上传[P(a)]、[x]、[y]、所处区域Zα给ORH</p><p>4.ORH   随机生成两随机数ηx、ηy，把其当做一个坐标值，计算其的网嵌入向量S、打包、加密之得到[P(η)]</p><p>5.ORH   计算    [P(η)]-[P(a)]=》[P(a’)]       ;        [x]-[ηx]=&gt;[x’]        ;        [y]-[ηy]=&gt;[y’]</p><p>《第五步是为了在4.2提高匹配精度的阶段判断坐标，所以把坐标也放到了距离向量中[P(a)]》</p><h3 id="四、ORH-乘车匹配-Ride-matching"><a href="#四、ORH-乘车匹配-Ride-matching" class="headerlink" title="四、ORH 乘车匹配   Ride-matching"></a>四、ORH 乘车匹配   Ride-matching</h3><h4 id="4-1-乘客所属区域zα匹配-Local-Zone-matching"><a href="#4-1-乘客所属区域zα匹配-Local-Zone-matching" class="headerlink" title="4.1.乘客所属区域zα匹配    Local Zone matching"></a>4.1.乘客所属区域zα匹配    Local Zone matching</h4><p>1.ORH   计算   [P(d)’]=[P(a)]-[P(b‘)]=[P(a)]-[P(b)]+[P(u)]</p><p>2.ORH   将 [P(d)’]发给CP</p><p>3.CP   解密 [P(d)’]得到 P(d)’、并且获得其混淆值 ~P(d)’   《这里的混淆电路还不太明白怎么操作的》</p><p>4.ORH   通过1-out-of-2 OT protocol 获得[P(u)]的混淆值  ~[P(u)]</p><p>5.通过算法2(如图3)判断两个司机哪个离乘客近</p><p>算法注释：</p><p>第一、二步是计算第一个司机到该乘客的最近距离(把P打包、第二步是找到两个P之间的最大值)</p><p>第三、四步同上计算第二个司机到该乘客的最近距离</p><p>第五步是判断哪个司机离乘客近</p><p><img src="/2020/01/23/2020-1-23-pRide-optimized-construction/image-20200123170731309.png" alt="图3"></p><p>​                                                            图  3   上为算法、下为混淆电路</p><h4 id="4-2-提高匹配精度-Refinement"><a href="#4-2-提高匹配精度-Refinement" class="headerlink" title="4.2.提高匹配精度   Refinement"></a>4.2.提高匹配精度   Refinement</h4><p>1.ORH   把4.1中计算出来的，乘客所处区域zα与最近司机的[P(d)’] (4.1.1中计算)、</p><p>与[x]-[ηx]=&gt;[x’]        ;        [y]-[ηy]=&gt;[y’]都发给CP</p><p>2.CP   将其解密并获得混淆值 <del>P(d)’、</del>[x’]、~[y’]</p><p>3.ORH   通过1-out-of-2 OT protocol 获得~[P(η)]    ;        ~[ηx]    ;        ~[ηy]</p><p>4.通过如下图算法3(如图4)判断其他八块区域za1, za2, za3, za4, za5, za6, za7,za8（具体见图1）是否有需要计算的必要</p><p>算法注释：</p><p>第四步是计算乘客的坐标x、y</p><p>第五、六步是计算第一个司机到该乘客的最近距离(把P打包、第二步是找到两个P之间的最大值)</p><p>第七步是计算Γ   Γ是一个8位的二进制数，每一位指示一个区域是否该计算（就是看以该距离为半径的圆是否“触”到了周围区域，具体看图1）</p><p>第八步是判断 区域zα4是否该计算，后面9到15步同理，是很简单的距离判断（见图一）</p><p><img src="/2020/01/23/2020-1-23-pRide-optimized-construction/image-20200123171733353.png" alt="图4"></p><p><img src="/2020/01/23/2020-1-23-pRide-optimized-construction/image-20200123171824965.png" alt="图4"></p><p>​                                                            图  4   上为算法、下为混淆电路</p><p>5.通过算法3获得有需要计算得必要的其他区域、</p><p>然后通过4.1Local Zone matching算法计算该区域中离乘客最近的司机，若该司机到乘客的距离B比乘客到本区域最短距离A小，就刷新最短距离A。最终我们得到距离最近的司机，并且将乘客位置信息发送给他………</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2020/01/23/2020-1-23-pRide-optimized-construction/image-20200123162426100.png&quot; alt=&quot;图1&quot;&gt;&lt;/p&gt;
&lt;center&gt;这是一篇pRide具体方案的翻译简化版&lt;/center&gt;
    
    </summary>
    
    
      <category term="大创" scheme="https://colalinn.github.io/categories/%E5%A4%A7%E5%88%9B/"/>
    
    
      <category term="pRide" scheme="https://colalinn.github.io/tags/pRide/"/>
    
  </entry>
  
  <entry>
    <title>路网嵌入 ROAD NETWORK EMBEDDING</title>
    <link href="https://colalinn.github.io/2020/01/22/2020-1-22-ROAD-NETWORK-EMBEDDING/"/>
    <id>https://colalinn.github.io/2020/01/22/2020-1-22-ROAD-NETWORK-EMBEDDING/</id>
    <published>2020-01-22T09:51:25.000Z</published>
    <updated>2020-01-29T03:26:23.521Z</updated>
    
    <content type="html"><![CDATA[<p>路网嵌入是一种用来计算最短道路距离的方案，通过记录每个节点（道路之间的交叉口）的信息，把常规的道路用多维空间向量表示，使得每个节点之间的距离更能更有效地被计算。</p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>路网嵌入是一种用来计算最短道路距离的方案，通过记录每个节点（道路之间的交叉口）的信息，把常规的道路用多维空间向量表示，使得每个节点之间的距离更能更有效地被计算。</p><blockquote><p>Road Network Embedding (RNE), proposed by Shahabi et al.* [12], is an approach to compute shortest path distance in road networks, which bases on the LLR embedding techniques [19]. RNE transforms a road network into a higher dimensional space by assigning a sketch (i.e., a vector) to every node such that the distance between any two nodes can be efficiently approximated using only their sketches.</p></blockquote><h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><p>(1) 设G=(V,E)为路网（road network）</p><p>V代表道路之间的交叉节点，E（edge）代表道路。</p><p>(2)  V有n个，把V分成<strong>n个子集</strong>如下</p><p>V : R = {V1,1, . . . , V1,α, . . . , Vβ,1, . . . , Vβ,α}</p><blockquote><p>Let n = |V | be the size of the node set V . Define R as a set of O(log2n) reference sets, which are subsets of V : R = {V1,1, . . . , V1,α, . . . , Vβ,1, . . . , Vβ,α}, where α = O(log n) and β = O(log n).</p><p> Each subset Vi,ji is defined as a random subset of <em>V</em> with 2<em>i</em> nodes randomly chosen from <em>V</em> . </p></blockquote><p>(3) 一个节点到一个子集Vij的距离即该节点到这个子集的最近距离所有节点距离的最小值</p><blockquote><p>The distance between node v and subset Vi,j is defined as dist(v, Vi,j ) = minw∈Vi,j dist(v, w)</p></blockquote><p>(4) 对于一个节点，把其到每个子集的最短距离记录下来，构成一个S集，这个S集就是该节点的<strong>路网嵌入向量</strong>，然后我们把所有的向量放在一起，构成路网嵌入数据集。</p><p><img src="/2020/01/22/2020-1-22-ROAD-NETWORK-EMBEDDING/image-20200122212143074.png" alt="4图"></p><p>(5) 假设一个点u，处于节点s和t之间，该节点u到某个子集Vij之间的距离可以如下公式计算，</p><p>dist(u，s)为点u到节点s的距离,dist(u,t)同理。</p><p><img src="/2020/01/22/2020-1-22-ROAD-NETWORK-EMBEDDING/image-20200122212358662.png" alt="aaa"></p><p>(6) 根据上面的分析，对于该点u，我们也可以得到一个<strong>路网嵌入向量</strong>如下</p><p><img src="/2020/01/22/2020-1-22-ROAD-NETWORK-EMBEDDING/image-20200122212654581.png" alt="6图"></p><p>(7) 最终，我们可以计算任意两点a,b的最短距离</p><p><img src="/2020/01/22/2020-1-22-ROAD-NETWORK-EMBEDDING/image-20200122212907442.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;路网嵌入是一种用来计算最短道路距离的方案，通过记录每个节点（道路之间的交叉口）的信息，把常规的道路用多维空间向量表示，使得每个节点之间的距离更能更有效地被计算。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大创" scheme="https://colalinn.github.io/categories/%E5%A4%A7%E5%88%9B/"/>
    
    
      <category term="pRide" scheme="https://colalinn.github.io/tags/pRide/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用配置记录</title>
    <link href="https://colalinn.github.io/2020/01/20/20-1-20/"/>
    <id>https://colalinn.github.io/2020/01/20/20-1-20/</id>
    <published>2020-01-20T02:31:50.000Z</published>
    <updated>2020-02-12T11:34:05.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单的hexo命令"><a href="#简单的hexo命令" class="headerlink" title="简单的hexo命令"></a>简单的hexo命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1.文章的生成及编辑</span><br><span class="line">hexo new “文章标题”</span><br><span class="line">博客所在路径\source_posts\”下生成一个md文件，文件名称为上面命令行所输入的文章标题</span><br><span class="line"></span><br><span class="line">2.文件发布</span><br><span class="line">hexo g generate</span><br><span class="line"></span><br><span class="line">3.本地测试</span><br><span class="line">hexo s </span><br><span class="line">访问localhost:4000来查看变化</span><br><span class="line"></span><br><span class="line">4.同步到github</span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line">5.Hexo更换主题并发布到github</span><br><span class="line">安装hexo-deployer-git自动部署发布工具</span><br><span class="line">npm install hexo-deployer-git  --save</span><br><span class="line">发布到GitHub</span><br><span class="line">输入如下命令：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line"></span><br><span class="line">6.如何一键式发布</span><br><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br><span class="line">可用以下简化（注意事项：下面的命令中 E:\github_repo\hexo_blog 是我博客的文件夹路径，请替换为你自己博客的路径，在git bash中输入命令）以后可以用hexo fuck来发布了</span><br><span class="line">git config --global alias.fuck &#39;!cd E:\github_repo\hexo_blog;hexo clean;hexo g;hexo d&#39;</span><br><span class="line">git fuck</span><br><span class="line">取消别名</span><br><span class="line">git config --global --unset alias.fuck</span><br></pre></td></tr></table></figure><h1 id="简单的markdown语法"><a href="#简单的markdown语法" class="headerlink" title="简单的markdown语法"></a>简单的markdown语法</h1><p><img src="/2020/01/20/20-1-20/markdown-program.jpg" alt="markdown语法"></p><hr><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p>1.GitHub+Hexo搭建个人博客（包括更改主题）真·从git、node.js从头教起必看</p><p><a href="https://blog.csdn.net/qq_37651252/article/details/97024874" target="_blank" rel="noopener">https://blog.csdn.net/qq_37651252/article/details/97024874</a> </p><p>2.通过hexo更新github pages博客</p><p><a href="https://www.jianshu.com/p/5fe8e618002d" target="_blank" rel="noopener">https://www.jianshu.com/p/5fe8e618002d</a></p><p>3.更换主题并且发布</p><p><a href="https://www.jianshu.com/p/20e1431abb83" target="_blank" rel="noopener">https://www.jianshu.com/p/20e1431abb83</a></p><p>4.Hexo的Next主题详细配置</p><p><a href="https://www.jianshu.com/p/3a05351a37dc" target="_blank" rel="noopener">https://www.jianshu.com/p/3a05351a37dc</a></p><p>5.初级看板娘</p><p><a href="https://blog.csdn.net/weixin_33738982/article/details/89621120" target="_blank" rel="noopener">https://blog.csdn.net/weixin_33738982/article/details/89621120</a></p><p>6.进阶版看板娘</p><p><a href="https://blog.csdn.net/qq_39610915/article/details/90679768" target="_blank" rel="noopener">https://blog.csdn.net/qq_39610915/article/details/90679768</a></p><p>7.Hexo NexT 代码块复制功能</p><p><a href="https://www.jianshu.com/p/3e9d614c1e77" target="_blank" rel="noopener">https://www.jianshu.com/p/3e9d614c1e77</a></p><p>8.Hexo写博客时的图片问题</p><p><a href="https://blog.csdn.net/TimeJjc/article/details/86707165" target="_blank" rel="noopener">https://blog.csdn.net/TimeJjc/article/details/86707165</a></p><p>9.Hexo NexT主题中集成gitalk评论系统</p><p><a href="https://asdfv1929.github.io/2018/01/20/gitalk/" target="_blank" rel="noopener">https://asdfv1929.github.io/2018/01/20/gitalk/</a></p><p>10.Hexo博客提交百度和Google收录</p><p><a href="https://www.jianshu.com/p/f8ec422ebd52" target="_blank" rel="noopener">https://www.jianshu.com/p/f8ec422ebd52</a></p><p>Hexo优化:创建sitemap站点地图并向Google站长工具提交</p><p><a href="https://blog.csdn.net/MobiusStrip/article/details/87258612" target="_blank" rel="noopener">https://blog.csdn.net/MobiusStrip/article/details/87258612</a></p><p>Google sitemap 不允许的网址的解决办法</p><p><a href="https://alanlee.fun/2017/12/30/google-sitemap/" target="_blank" rel="noopener">https://alanlee.fun/2017/12/30/google-sitemap/</a></p><p>11.markdown语法简介</p><p><a href="http://www.markdown.cn/" target="_blank" rel="noopener">http://www.markdown.cn/</a></p><p>12.更多优化如加载进度条等</p><p><a href="https://zhuanlan.zhihu.com/p/85037898" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/85037898</a></p><p>13.Hexo添加字数统计、阅读时长</p><p><a href="https://blog.csdn.net/weixin_33753003/article/details/86257475" target="_blank" rel="noopener">https://blog.csdn.net/weixin_33753003/article/details/86257475</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简单的hexo命令&quot;&gt;&lt;a href=&quot;#简单的hexo命令&quot; class=&quot;headerlink&quot; title=&quot;简单的hexo命令&quot;&gt;&lt;/a&gt;简单的hexo命令&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://colalinn.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://colalinn.github.io/tags/hexo/"/>
    
      <category term="others" scheme="https://colalinn.github.io/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>test2</title>
    <link href="https://colalinn.github.io/2020/01/15/%E2%80%98test2/"/>
    <id>https://colalinn.github.io/2020/01/15/%E2%80%98test2/</id>
    <published>2020-01-15T11:40:22.000Z</published>
    <updated>2020-02-10T10:12:51.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二篇测试"><a href="#第二篇测试" class="headerlink" title="第二篇测试"></a>第二篇测试</h1><p>别来无恙啊</p><h3 id="2020-1-21"><a href="#2020-1-21" class="headerlink" title="2020.1.21"></a>2020.1.21</h3><p>今天武汉不明肺炎又进一步扩散了，讨论甚多</p><h3 id="2020-1-25-“大年初一，百病不侵”"><a href="#2020-1-25-“大年初一，百病不侵”" class="headerlink" title="2020.1.25  “大年初一，百病不侵”"></a>2020.1.25  “大年初一，百病不侵”</h3><p>大年初一，2019ncov已经严重到湖北禁省，各省份一级公共卫生响应。武汉将建两座“小汤山”医院，火神山、雷神山，今年春节愿我们百病不侵</p><h3 id="2020-1-27"><a href="#2020-1-27" class="headerlink" title="2020.1.27"></a>2020.1.27</h3><p>今天做了一道leetcode的最长回文子串</p><h3 id="2020-1-28-“成固欣然、败亦可喜”"><a href="#2020-1-28-“成固欣然、败亦可喜”" class="headerlink" title="2020.1.28  “成固欣然、败亦可喜”"></a>2020.1.28  “成固欣然、败亦可喜”</h3><p>今天疫情确诊人数突增2000+人，应该是试剂盒增加的原因，我有预感很快就能控制住。</p><p>今天Hexo做好了文章的图片，还有评论功能，leetcode做了一道Z”字符串”</p><h3 id="2020-1-30"><a href="#2020-1-30" class="headerlink" title="2020.1.30"></a>2020.1.30</h3><p>今天突增3000+人，今日配tensorflow环境，刷了两道题，无事发生</p><h3 id="2020-02-02-“对称日”"><a href="#2020-02-02-“对称日”" class="headerlink" title="2020.02.02 “对称日”"></a>2020.02.02 “对称日”</h3><p>这两日对确诊人数的增长已经麻木，只是身边的同学家里受到影响，很难受。</p><p>一直以为疫情还离自己很远，可当灾难来临时，降临到了身边的人时。</p><p>才知道灾难有多无情，才知道自己有多无力。</p><h3 id="2020-02-10-“奥里给”"><a href="#2020-02-10-“奥里给”" class="headerlink" title="2020.02.10 “奥里给”"></a>2020.02.10 “奥里给”</h3><p>没有什么是简单的</p><iframe src="//player.bilibili.com/player.html?aid=2650250&cid=4138659&page=7" scrolling="yes" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="400" width="500"> </iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第二篇测试&quot;&gt;&lt;a href=&quot;#第二篇测试&quot; class=&quot;headerlink&quot; title=&quot;第二篇测试&quot;&gt;&lt;/a&gt;第二篇测试&lt;/h1&gt;&lt;p&gt;别来无恙啊&lt;/p&gt;
&lt;h3 id=&quot;2020-1-21&quot;&gt;&lt;a href=&quot;#2020-1-21&quot; class=&quot;h
      
    
    </summary>
    
    
    
      <category term="test-tag" scheme="https://colalinn.github.io/tags/test-tag/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="https://colalinn.github.io/2020/01/15/hello-world/"/>
    <id>https://colalinn.github.io/2020/01/15/hello-world/</id>
    <published>2020-01-15T08:46:23.000Z</published>
    <updated>2020-01-20T03:08:42.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world!"></a>hello world!</h1><h1 id="github-ColaLinN"><a href="#github-ColaLinN" class="headerlink" title="github: ColaLinN"></a>github: ColaLinN</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hello-world&quot;&gt;&lt;a href=&quot;#hello-world&quot; class=&quot;headerlink&quot; title=&quot;hello world!&quot;&gt;&lt;/a&gt;hello world!&lt;/h1&gt;&lt;h1 id=&quot;github-ColaLinN&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="hello world!" scheme="https://colalinn.github.io/categories/hello-world/"/>
    
    
      <category term="hello world!" scheme="https://colalinn.github.io/tags/hello-world/"/>
    
  </entry>
  
</feed>
